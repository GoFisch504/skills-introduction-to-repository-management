Title,Body,Labels
"Set up Python virtual environments and requirements.txt in each module","Initialize virtual environments for bot, backend, and web_ui. Ensure each has its own requirements.txt for dependencies.","setup,infra"
"Add root-level README with architecture and setup instructions","Write a README.md at the project root that explains the project structure, modules, and quickstart steps.","documentation"
"Implement basic command loader in bot.py","Create the entrypoint for the Discord bot with dynamic command/event loading from the bot/commands and bot/events directories.","bot,discord"
"Add /roll slash command","Implement a slash command for dice rolling in the Discord bot.","bot,discord,feature"
"Add /help slash command","Implement a help command that describes available bot features and usage.","bot,discord,feature"
"Add /inventory slash command","Implement a slash command to manage and view character inventory.","bot,discord,feature"
"Implement event listeners in events/","Add core event handlers such as on_ready and on_message to the bot/events directory.","bot,discord"
"Integrate API calls to backend for character/inventory management","Connect the Discord bot to backend APIs for persistence of character and inventory data.","bot,backend,api,integration"
"Scaffold FastAPI app in main.py","Set up the main FastAPI application entrypoint with routing and configuration.","backend,fastapi,setup"
"Implement characters.py endpoints (CRUD)","Create CRUD endpoints for managing character data in backend/routes/characters.py.","backend,api,feature"
"Implement sessions.py endpoints (CRUD)","Create CRUD endpoints for managing session notes in backend/routes/sessions.py.","backend,api,feature"
"Define character and session schemas","Write Pydantic models for characters and sessions in backend/schemas/.","backend,api,models"
"Add error handling and validation","Implement robust error handling and input validation for all API endpoints.","backend,api,quality"
"Write basic API tests","Add simple tests for API endpoints to ensure correctness and stability.","backend,testing"
"Build main Streamlit app in app.py","Set up the Streamlit app with navigation and basic page structure.","web_ui,streamlit,setup"
"Implement character management page","Create UI for viewing, adding, editing, and deleting characters.","web_ui,feature"
"Implement session notes page","Create UI for viewing, adding, and editing session notes.","web_ui,feature"
"Create forms for adding/editing characters and notes","Implement reusable forms for character and session note creation/editing in web_ui/components/forms.py.","web_ui,feature"
"Display character/session data in tables or charts","Use Streamlit components to show character lists and session note history visually.","web_ui,feature"
"Connect frontend to backend via services.py","Implement logic to fetch and send data to backend API from the Streamlit frontend.","web_ui,backend,api,integration"
"Draft initial custom GPT prompt templates for DND use cases","Write prompt templates for common D&D agent scenarios in prompts/custom_gpt_prompts.md.","prompts,ai"
"Add documentation/examples for prompt usage","Document how to use and customize prompt templates for the project.","prompts,ai,documentation"
"Set up GitHub Actions workflow for linting and tests","Add CI/CD configuration to automatically lint and test code on push/pull requests.","ci,infra"
"Generate API docs (e.g., with FastAPIâ€™s OpenAPI)","Ensure API docs are automatically available and updated, e.g., via FastAPI Swagger UI.","backend,documentation"
"Add unit tests for core modules","Write unit tests for bot, backend, and web_ui modules.","testing"
"Write guides for deploying each component","Document deployment steps for the Discord bot, backend server, and Streamlit app.","documentation,devops"